{"mappings":"YAEC,IACOA,EACAC,EAGAC,GCPP,W,kBA4DOC,EAAKC,KAAKC,GAAKC,iBAAiB,SAAS,WACrCH,EAAKI,eAAeF,GAAKG,WAAWC,EAAMC,YAAYC,MAAMC,QAAU,IACtET,EAAKI,eAAeF,GAAKG,WAAWC,EAAMI,YAAYF,MAAMC,QAAU,G,KA7DxET,EAAO,CACTW,eAAgBC,SAASC,cAAc,aACvCC,mBAAoBF,SAASG,iBAAiB,sBAC9CC,oBAAqBJ,SAASC,cAAc,wBAE5CI,MAAOL,SAASC,cAAc,UAC9BZ,KAAMW,SAASG,iBAAiB,sBAEhCX,eAAgBQ,SAASG,iBAAiB,kCAC1CG,YAAaN,SAASC,cAAc,2BAGlCP,EAAQ,CACVI,WAAY,EACZH,WAAY,GAEhBY,OAAOC,OAAOd,GAIdN,EAAKc,mBAAmBO,SAAS,SAAAC,GAC7BA,EAAInB,iBAAiB,SAAS,WAC1BH,EAAKW,eAAeH,MAAMe,UAAY,YACtCX,SAASY,KAAKhB,MAAMiB,SAAW,Q,OAKvCzB,EAAKgB,oBAAoBb,iBAAiB,SAAS,WAC/CH,EAAKW,eAAeH,MAAMe,UAAY,YACtCX,SAASY,KAAKhB,MAAMiB,SAAW,S,IAKnCzB,EAAKiB,MAAMd,iBAAiB,WAAW,SAACuB,GACpCA,EAAEC,eAEF3B,EAAKkB,YAAYU,YAAc,iBAG/B,IAFA,IAAIC,GAAoB,EAEf3B,EAAM,EAAGA,EAAMF,EAAKC,KAAK6B,SAAU5B,EACL,GAA/BF,EAAKC,KAAKC,GAAK6B,MAAMD,SACrB9B,EAAKI,eAAeF,GAAKG,WAAWC,EAAMC,YAAYC,MAAMC,QAAU,IACtET,EAAKI,eAAeF,GAAKG,WAAWC,EAAMI,YAAYF,MAAMC,QAAU,IACtEoB,GAAoB,GAIvBA,IACD7B,EAAKkB,YAAYU,YAAc,2BAEnC5B,EAAKkB,YAAYV,MAAMC,QAAU,IACjCuB,YAAW,WAAQhC,EAAKkB,YAAYV,MAAMC,QAAU,G,GAAQ,I,IAC7D,GAIH,IAAK,IAAIwB,EAAM,EAAGA,EAAMjC,EAAKC,KAAK6B,SAAUG,EAAGC,EAAAD,EAMlD,CAjEA,GDGOpC,EAAae,SAASC,cAAc,sBACpCf,EAAcc,SAASC,cAAc,iBAGrCd,EAAa,WACjB,IAAMoC,EAA2D,SAA9CrC,EAAYsC,aAAa,mBAA+B,EAC3EtC,EAAYuC,aAAa,iBAAkBF,GAE3CtC,EAAWyC,UAAUC,OAAO,U,EANT3B,SAASC,cAAc,kBAS/BV,iBAAiB,QAASJ,GACvCD,EAAYK,iBAAiB,QAASJ,E","sources":["src/index.js","src/js/modal.js"],"sourcesContent":["import './js/modal.js';\n\n(() => {\n  const mobileMenu = document.querySelector('.js-menu-container');\n  const openMenuBtn = document.querySelector('.js-open-menu');\n  const closeMenuBtn = document.querySelector('.js-close-menu');\n\n  const toggleMenu = () => {\n    const isMenuOpen = openMenuBtn.getAttribute('aria-expanded') === 'true' || false;\n    openMenuBtn.setAttribute('aria-expanded', !isMenuOpen);\n\n    mobileMenu.classList.toggle('is-open');\n  };\n\n  closeMenuBtn.addEventListener('click', toggleMenu);\n  openMenuBtn.addEventListener('click', toggleMenu);\n})();","(() => {\n    const refs = {\n        modalContainer: document.querySelector(\".backdrop\"),\n        modalContainerOpen: document.querySelectorAll(\".modal-open-button\"),\n        modalContainerClose: document.querySelector(\".modal__close-button\"),\n\n        modal: document.querySelector(\".modal\"),\n        inps: document.querySelectorAll(\".modal__text-input\"),\n\n        msgsContainers: document.querySelectorAll(\".modal__warning-text-container\"),\n        modalBtnMsg: document.querySelector(\".modal__button-warning\"),\n    }\n\n    const Alert = {\n        wrongInput: 1,\n        emptyInput: 3\n    }\n    Object.freeze(Alert);\n\n\n    // \"Open modal\" buttons\n    refs.modalContainerOpen.forEach( btn => {\n        btn.addEventListener(\"click\", () => {\n            refs.modalContainer.style.transform = \"scaleY(1)\";\n            document.body.style.overflow = \"hidden\";\n        });\n    });\n\n    // The \"close modal\" button. Yes, there's only one of kind\n    refs.modalContainerClose.addEventListener(\"click\", () => {\n        refs.modalContainer.style.transform = \"scaleY(0)\";\n        document.body.style.overflow = \"visible\";\n    });\n\n\n    // Invalid inputs on the submit event\n    refs.modal.addEventListener(\"invalid\", (e) => {\n        e.preventDefault;\n\n        refs.modalBtnMsg.textContent = \"Invalid inputs\";\n        let emptyInputsAbsent = true;\n\n        for (let idx = 0; idx < refs.inps.length; ++idx) {\n            if (refs.inps[idx].value.length == 0) {\n                refs.msgsContainers[idx].childNodes[Alert.emptyInput].style.opacity = \"1\";\n                refs.msgsContainers[idx].childNodes[Alert.wrongInput].style.opacity = \"0\";\n                emptyInputsAbsent = false;\n            }\n        }\n        \n        if (!emptyInputsAbsent) {\n            refs.modalBtnMsg.textContent = \"All fields are required\";\n        }\n        refs.modalBtnMsg.style.opacity = \"1\";\n        setTimeout(() => { refs.modalBtnMsg.style.opacity = \"0\"; }, 2000);\n    }, true);\n\n\n    // Change alert message of an input back if this input gets some... input\n    for (let idx = 0; idx < refs.inps.length; ++idx) {\n        refs.inps[idx].addEventListener(\"input\", () => {\n            refs.msgsContainers[idx].childNodes[Alert.emptyInput].style.opacity = \"0\";\n            refs.msgsContainers[idx].childNodes[Alert.wrongInput].style.opacity = \"1\";\n        });\n    }\n})();"],"names":["mobileMenu","openMenuBtn","toggleMenu","refs","inps","idx","addEventListener","msgsContainers","childNodes","Alert","emptyInput","style","opacity","wrongInput","modalContainer","document","querySelector","modalContainerOpen","querySelectorAll","modalContainerClose","modal","modalBtnMsg","Object","freeze","forEach","btn","transform","body","overflow","e","preventDefault","textContent","emptyInputsAbsent","length","value","setTimeout","idx1","_loop","isMenuOpen","getAttribute","setAttribute","classList","toggle"],"version":3,"file":"index.a723d534.js.map"}